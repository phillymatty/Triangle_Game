function PegHoleContainerModel(x,y,filled){this.x=x;this.y=y;this.filled=filled}PegHoleContainerModel.prototype.getString=function(){return"pegHoleContainer"+this.x+"-"+this.y};function BoardModel(numberOfRows){this.model=[];this.numRows=numberOfRows;this.create=function(){for(var i=0;i<this.numRows;i++){var horizontal=[];for(var j=0;j<=i;j++){if(i===0&&j===0){horizontal.push(new PegHoleContainerModel(i,j,false))}else{horizontal.push(new PegHoleContainerModel(i,j,true))}}this.model[i]=horizontal}}}BoardModel.prototype.isHoleEmpty=function(x,y){if(!this.model[x][y]){return false}if(this.model[x][y].filled===false){return true}else{return false}};BoardModel.prototype.getPegHoleContainer=function(x,y){return this.model[x][y]};function BoardController(model,view){this.model=model;this.view=view;this.availableHoles=[];this.jumpables=[];this.currentPeg=null;this.score=0;view.regesterMoveStartHandler($.proxy(this.findAvailableHoles,this))}BoardController.prototype.addHoles=function(x,y){var pegHoleContainer=this.model.getPegHoleContainer(x,y);this.availableHoles.push(pegHoleContainer);this.view.setDroppable(pegHoleContainer,$.proxy(this.updateModel,this))};BoardController.prototype.addJumpables=function(x,y){this.jumpables.push(this.model.getPegHoleContainer(x,y))};BoardController.prototype.convertIdToXCoor=function(pegID){return parseInt(pegID.charAt(16),10)};BoardController.prototype.convertIdToYCoor=function(pegID){return parseInt(pegID.charAt(18),10)};BoardController.prototype.getPegHoleContainerByID=function(pegID){var xCoor=this.convertIdToXCoor(pegID);var yCoor=this.convertIdToYCoor(pegID);return this.model.getPegHoleContainer(xCoor,yCoor)};BoardController.prototype.clearController=function(){this.availableHoles=[];this.jumpables=[]};BoardController.prototype.findAvailableHoles=function(pegID){console.log(pegID);this.clearController();this.currentPeg=this.getPegHoleContainerByID(pegID);this.checkDirections(this.currentPeg.x,this.currentPeg.y);console.log("avail "+this.availableHoles);console.log("jumpables"+this.jumpables)};BoardController.prototype.checkDirections=function(x,y){this.checkUp(x,y);this.checkDown(x,y);if(this.model.model[x].length>=3){this.checkLeft(x,y);this.checkRight(x,y)}};BoardController.prototype.checkUp=function(x,y){console.log("Check up ");if(x-2<0){console.log("Up is out of bounds");return}else{if(y-2>=0&&y<this.model.model[x-2].length){console.log("there are 2");if(this.model.isHoleEmpty(x-2,y)){if(!this.model.isHoleEmpty(x-1,y)){this.addJumpables(x-1,y);this.addHoles(x-2,y)}}if(this.model.isHoleEmpty(x-2,y-2)){if(!this.model.isHoleEmpty(x-1,y-1)){this.addJumpables(x-1,y-1);this.addHoles(x-2,y-2)}}}else{console.log("only one up");if(y>=this.model.model[x-2].length){console.log("up left");if(this.model.isHoleEmpty(x-2,y-2)){if(!this.model.isHoleEmpty(x-1,y-1)){this.addJumpables(x-1,y-1);this.addHoles(x-2,y-2)}}}else{console.log("up right");if(this.model.isHoleEmpty(x-2,y)){console.log("here1");if(!this.model.isHoleEmpty(x-1,y)){console.log("here2");this.addJumpables(x-1,y);this.addHoles(x-2,y)}}}}}};BoardController.prototype.checkDown=function(x,y){console.log("Check down");if(x+2>=this.model.model.length){console.log("down is out of bounds");return}else{if(this.model.isHoleEmpty(x+2,y)){if(!this.model.isHoleEmpty(x+1,y)){this.addHoles(x+2,y);this.addJumpables(x+1,y)}}if(this.model.isHoleEmpty(x+2,y+2)){if(!this.model.isHoleEmpty(x+1,y+1)){this.addHoles(x+2,y+2);this.addJumpables(x+1,y+1)}}}};BoardController.prototype.checkLeft=function(x,y){console.log("Check left");if(y-2>=0){console.log("can go left");if(this.model.isHoleEmpty(x,y-2)){if(!this.model.isHoleEmpty(x,y-1)){this.addHoles(x,y-2);this.addJumpables(x,y-1)}}}};BoardController.prototype.checkRight=function(x,y){console.log("Check right");if(y+2<this.model.model[x].length){console.log("can go right");if(this.model.isHoleEmpty(x,y+2)){if(!this.model.isHoleEmpty(x,y+1)){this.addHoles(x,y+2);this.addJumpables(x,y+1)}}}};BoardController.prototype.findJumpedpeg=function(holeContainerID){for(var i=0;i<this.availableHoles.length;i++){if(this.availableHoles[i].getString()===holeContainerID){return this.jumpables[i].getString()}}};BoardController.prototype.updateModel=function(holeContainerID,oldContainerID){console.log("updateModel "+oldContainerID);this.model.getPegHoleContainer(this.convertIdToXCoor(oldContainerID),this.convertIdToYCoor(oldContainerID)).filled=false;this.model.getPegHoleContainer(this.convertIdToXCoor(holeContainerID),this.convertIdToYCoor(holeContainerID)).filled=true;console.log(this.model);var jumpedPegID=this.findJumpedpeg(holeContainerID);this.view.removeJumpedPeg(jumpedPegID);this.model.getPegHoleContainer(this.convertIdToXCoor(jumpedPegID),this.convertIdToYCoor(jumpedPegID)).filled=false;if(this.checkForEnd()){this.view.showEnd(this.score)}};BoardController.prototype.checkForEnd=function(){this.score=0;for(var i=0;i<this.model.model.length;i++){for(var j=0;j<this.model.model[i].length;j++){if(this.model.model[i][j].filled===true){this.clearController();this.score++;this.checkDirections(this.model.model[i][j].x,this.model.model[i][j].y);if(this.availableHoles.length>0){console.log("false");return false}}}}console.log("true");return true};function newGame(sizeOfBoard,theColor){var model=new BoardModel(sizeOfBoard);model.create();var view=new BoardView(model);view.setNewBoard(theColor);var controller=new BoardController(model,view)}$(document).ready(function(){newGame(5);$(".colorPicker").change(function(){theColor=$(this).val().toLowerCase();if(theColor=="choose color"||theColor==""){return false}else{newGame(5,theColor)}})});function createPeg(){}function getRandomColor(){}function touchHandler(event){var touch=event.originalEvent.touches[0]||event.originalEvent.changedTouches[0];var simulatedEvent=document.createEvent("MouseEvent");simulatedEvent.initMouseEvent({touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup"}[event.type],true,true,window,1,touch.screenX,touch.screenY,touch.clientX,touch.clientY,false,false,false,false,0,null);touch.target.dispatchEvent(simulatedEvent);event.preventDefault()}function initTouches(){$(".triangle").bind("touchstart",touchHandler,true);$(".triangle").bind("touchmove",touchHandler,true);$(".triangle").bind("touchend",touchHandler,true);$(".triangle").bind("touchcancel",touchHandler,true)}function BoardView(model){this.model=model}BoardView.prototype.getPegHTML=function(){return'<div class="peg"></div>'};BoardView.prototype.getPegHoleHTML=function(){return'<div class="pegHole" ></div>'};BoardView.prototype.getPegHoleContainerHTML=function(pegHoleContainer){var pegHoleContainerHTML='<div class = "pegHoleContainer" id ="'+pegHoleContainer.getString()+'">';if(pegHoleContainer.filled){pegHoleContainerHTML+=this.getPegHoleHTML()+this.getPegHTML()+"</div>"}else{pegHoleContainerHTML+=this.getPegHoleHTML()+"</div>"}return pegHoleContainerHTML};BoardView.prototype.getRowHTML=function(rowNum){return'<div class="pegRow" id = "pegRow'+rowNum+'"></div>'};BoardView.prototype.setNewBoard=function(color){$(".triangle").empty();for(var i=0;i<this.model.model.length;i++){var rowNum=i+1;$(".triangle").append(this.getRowHTML(rowNum));for(var j=0;j<this.model.model[i].length;j++){$("#pegRow"+rowNum).append(this.getPegHoleContainerHTML(this.model.model[i][j]))}}$(".pegRow").each(function(index,element){if(typeof randomColor!=="undefined"&&typeof color!=="undefined"){colors=randomColor({count:3,hue:color})}else{colors=["#4878A8","#F07830","#781800"]}var randomNumber=Math.floor(Math.random()*colors.length);$(element).find(".peg").css({"background-color":colors[randomNumber]})});$(".peg").draggable({revert:"invalid",revertDuration:200,snap:".pegHole",snapMode:"inner",snapTolerance:19})};BoardView.prototype.regesterMoveStartHandler=function(handler){$(".peg").on("dragstart",function(event,ui){handler(ui.helper[0].parentNode.id)})};BoardView.prototype.setDroppable=function(pegHoleContainer,handler){$("#"+pegHoleContainer.getString()+" > .pegHole").droppable({drop:function(event,ui){var oldPegHoleID=ui.draggable.parent().attr("id");ui.draggable.css({top:"40px",left:"20px"});$(this).parent().append(ui.helper);BoardView.prototype.removeDroppables();handler($(this).parent().attr("id"),oldPegHoleID)},hoverClass:"over",tolerance:"intersect"})};BoardView.prototype.removeJumpedPeg=function(holeContainerID){holeContainerID="#"+holeContainerID;$(holeContainerID+" > .peg").remove()};BoardView.prototype.showEnd=function(score){$(".gameOver").css({display:"inline"});$(".score").html(score);if(score>=5){score=5}var messages=["Perfect!","So close!","Not bad!","Average","Try Harder!"];$(".message").html(messages[score-1]);$("#tryAgain").on("click",function(){$(".gameOver").css({display:"none"});$(".triangle").empty();newGame(5)})};BoardView.prototype.removeDroppables=function(){$(".ui-droppable").droppable("destroy")};